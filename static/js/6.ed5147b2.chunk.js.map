{"version":3,"file":"static/js/6.ed5147b2.chunk.js","mappings":"mOAEMA,EAAU,mCACHC,EAAQ,kCAEd,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,2GAA2BC,EAA3B,+BAAqC,cAAeC,EAApD,+BAAgE,GAAhE,SACkBC,EAAAA,EAAAA,IAAA,uCACWF,EADX,oBAC8BH,GAD9B,OACwCI,GAC7D,CACEE,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,gOARH,cACCC,EADD,yBAYEA,GAZF,mE,6KCHMC,EAAUC,EAAAA,GAAAA,IAAH,oKASPC,EAAQD,EAAAA,GAAAA,MAAH,+FAMLE,EAAYF,EAAAA,GAAAA,OAAH,+N,SC0DtB,EApEe,WACb,OAAkDG,EAAAA,EAAAA,UAAS,IAA3D,eAAOC,EAAP,KAA0BC,EAA1B,KACA,GAAwCC,EAAAA,EAAAA,IAAgB,CAAC,GAAzD,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EAEd,GAAyB,MADV,UAAGJ,EAAaK,IAAI,gBAApB,QAAgC,IACjCC,OAAd,CAEA,IAAMC,EAAkB,mCAAG,gHAEExB,EAAAA,EAAAA,GAAY,gBAAD,WAE9BiB,IAJiB,OAEjBQ,EAFiB,OAMjBC,GANiB,OAMCD,EAAWE,KAAKC,SACxCb,EAAqBW,GAPE,gDASvBG,QAAQC,IAAR,MATuB,yDAAH,qDAYxBN,GAdmC,CAepC,GAAE,CAACP,IAUJ,OACE,4BACE,iBAAMc,SAVO,SAAAC,GACfA,EAAEC,iBACF,IAAMC,EAAQF,EAAEG,OAAOC,SAASC,OAAOC,MAAMf,OAE7CL,EAD6B,KAAVgB,EAAe,CAAEA,MAAAA,GAAU,CAAC,GAE/CnB,EAAqB,GACtB,EAIG,UACE,UAACN,EAAD,YACE,SAACG,EAAD,CAAW2B,KAAK,SAAhB,UACE,wCAGF,SAAC5B,EAAD,CACE4B,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,GAAG,iBAIT,wBACG7B,EAAkB8B,OAAS,EAC1B9B,EAAkB+B,KAAI,YAAoB,IAAjBF,EAAgB,EAAhBA,GAAIG,EAAY,EAAZA,MAC3B,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKJ,GAAMK,MAAO,CAAEC,KAAM9B,GAAlC,SACG2B,KAFIH,EAMZ,KAED,0CAKT,C","sources":["FetchMovies.js","pages/Movies.styled.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY_API = '228d8284295592923c769d834cdf0ca4';\nexport const BASE_URL = `https://image.tmdb.org/t/p/w500`;\n\nexport async function FetchMovies(request = 'movie/76341', searchStr = '') {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/${request}?api_key=${KEY_API}${searchStr}`,\n    {\n      method: 'GET',\n      headers: {\n        accept: 'application/json',\n        Authorization:\n          'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyMjhkODI4NDI5NTU5MjkyM2M3NjlkODM0Y2RmMGNhNCIsInN1YiI6IjY0NWNkMDkyMTU2Y2M3MDE1ZTc5MGM1YyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.0OWXQGTi84goa4jFlG05fCrd_XVJjVqvLGWlyS6LTWg',\n      },\n    }\n  );\n  return response;\n}\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n  margin-bottom: 16px;\n  text-transform: uppercase;\n  gap: 10px;\n`;\n\nexport const Input = styled.input`\n  padding: 8px 32px 8px 8px;\n  border-radius: 4px;\n  font: inherit;\n`;\n\nexport const BtnSearch = styled.button`\n  padding: 8px 32px 8px 8px;\n  border-radius: 4px;\n  font: inherit;\n  color: black;\n  background-color: beige;\n  &:focus,\n  &:hover {\n    color: white;\n    background-color: orangered;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { FetchMovies } from '../FetchMovies';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { Wrapper, Input, BtnSearch } from './Movies.styled';\n\nconst Movies = () => {\n  const [arrayMoviesSearch, setArrayMoviesSearch] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams({});\n  const location = useLocation();\n\n  useEffect(() => {\n    const movieName = searchParams.get('query') ?? '';\n    if (movieName.trim() === '') return;\n\n    const ApiFetshListMovies = async () => {\n      try {\n        const listMovies = await FetchMovies(\n          `/search/movie`,\n          `&${searchParams}`\n        );\n        const arrayMovies = [...listMovies.data.results];\n        setArrayMoviesSearch(arrayMovies);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    ApiFetshListMovies();\n  }, [searchParams]);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const query = e.target.elements.search.value.trim();\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n    setArrayMoviesSearch([]);\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <Wrapper>\n          <BtnSearch type=\"submit\">\n            <span>Search</span>\n          </BtnSearch>\n\n          <Input\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies\"\n            id=\"search\"\n          />\n        </Wrapper>\n      </form>\n      <ul>\n        {arrayMoviesSearch.length > 0 ? (\n          arrayMoviesSearch.map(({ id, title }) => {\n            return (\n              <li key={id}>\n                <Link to={`${id}`} state={{ from: location }}>\n                  {title}\n                </Link>\n              </li>\n            );\n          })\n        ) : (\n          <p>Nothing...</p>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["KEY_API","BASE_URL","FetchMovies","request","searchStr","axios","method","headers","accept","Authorization","response","Wrapper","styled","Input","BtnSearch","useState","arrayMoviesSearch","setArrayMoviesSearch","useSearchParams","searchParams","setSearchParams","location","useLocation","useEffect","get","trim","ApiFetshListMovies","listMovies","arrayMovies","data","results","console","log","onSubmit","e","preventDefault","query","target","elements","search","value","type","autoComplete","autoFocus","placeholder","id","length","map","title","to","state","from"],"sourceRoot":""}